<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>Shift+Q</shortcut>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>'''
Author: Jaspreet Jhoja

- Launch the Script
- Design your schematic in Interconnect
- Select the component in Interconnect and press Shift+Q in Klayout

'''

import pya

# Enter your Python code here ..

from SiEPIC import _globals
from SiEPIC.lumerical.interconnect import *

run_INTC()

        
lumapi = _globals.LUMAPI


try:

    lumapi.evalScript(_globals.INTC, "cname = get('name');")
    name = lumapi.getVar(_globals.INTC, "cname")
    
    lumapi.evalScript(_globals.INTC, "cmodel = get('model');")
    model = lumapi.getVar(_globals.INTC, "cmodel")
    
    lumapi.evalScript(_globals.INTC, "clibrary = get('library');")
    library = lumapi.getVar(_globals.INTC, "clibrary")
    library = library.split("::")[-1]
    
    #lumapi.close(_globals.INTC)
    
    if(1==1):
      # Import functions from SiEPIC-Tools, and get technology details
      from SiEPIC.utils import select_paths, get_layout_variables
      TECHNOLOGY, lv, ly, cell = get_layout_variables()
      dbu = ly.dbu
      from SiEPIC.extend import to_itype
      from SiEPIC.scripts import path_to_waveguide
      
      
      # Layer mapping:
      LayerSiN = ly.layer(TECHNOLOGY['Si'])

      
      #fetch mouse coordinates
      #I m currently trying to figure out but the current cursor event gives you the mouse coordinates relative to your screen size rather than relative to gds coordinates.
      win = pya.Application.instance().main_window()
      cursor = pya.Application.instance().main_window().cursor
      print(cursor.pos.x, cursor.pos.y)
      
      #So I place the intances to 0,0 coordinate
      t = Trans(Trans.R0, 0/dbu , 0/dbu)
     
      cell = pya.Application.instance().main_window().current_view().active_cellview().cell 
      
 
      # Import cells from the SiEPIC GDS Library, and instantiate them
      element_imported = ly.create_cell(model, library).cell_index()
      cell.insert(CellInstArray(element_imported, t))
      
      #lv.clear_object_selection()
      #lv.zoom_fit()
      #lv.max_hier()

except Exception as e:
  print(e)</text>
</klayout-macro>
