<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># for debugging: check if this script has been executed.
Script_SiEPIC_General=1

# Issue: This file is loaded at startup, when there is no layout selected. 
# thus it cannot get a technology

# Import KLayout Python API methods:
# Box, Point, Polygon, Text, Trans, LayerInfo, etc
from pya import *
from SiEPIC_klayout.utils import get_technology, get_technology_by_name

class LumericalINTERCONNECT_Laser(PCellDeclarationHelper):
  """
  The PCell declaration for the LumericalINTERCONNECT Optical Network Analyzer.
  This configures the swept tunable laser
  
  Ultimately want to generate Spice output such as:
  
  .ona input_unit=wavelength input_parameter=center_and_range center=1550e-9
  + range=100e-9 start=3 stop=4 number_of_points=1000 orthogonal_identifier=1
  + label=TE peak_analysis=disable number_of_peaks=8 peak_at_maximum=9
  + peak_threshold=0 peak_excursion=11 pit_excursion=12 fwhm_excursion=13
  + minimum_loss=14 sensitivity=-200 analysis_type=scattering_data
  + multithreading=automatic number_of_threads=1 input(1)=X_GC1,opt_fiber
  + output=X_GC2,opt_fiber

  
  """
  def __init__(self):
    # Important: initialize the super class
    super(LumericalINTERCONNECT_Laser, self).__init__()
    # declare the parameters
    self.param("wavelength_start", self.TypeDouble, "Start Wavelength (nm)", default = 1500)
    self.param("wavelength_stop", self.TypeDouble, "Stop Wavelength (nm)", default = 1600)
    self.param("npoints", self.TypeInt, "Number of points", default = 2000)     
    self.param("orthogonal_identifier", self.TypeInt, "Orthogonal identifier (1=TE, 2=TM)", default = 1)     
    self.param("ignoreOpticalIOs", self.TypeInt, "Ignore optical IOs in simulations (1=Ignore, 0=Include)", default = 0)
    self.param("s", self.TypeShape, "", default = DPoint(0, 0))

  def can_create_from_shape_impl(self):
    return False
    
  def produce_impl(self):
    from SiEPIC_klayout.utils import layout_pgtext, get_technology
    TECHNOLOGY = get_technology()
    ly = self.layout
    shapes = self.cell.shapes
    dbu = self.layout.dbu
    
    LayerINTERCONNECT = ly.layer(TECHNOLOGY['Lumerical'])

    # Draw the laser
    width = 60/dbu
    height = 40/dbu
    shapes(LayerINTERCONNECT).insert(Box(-width/2, -height/2, width/2, height/2))
    
    shapes(LayerINTERCONNECT).insert(Text("Tunable Laser", Trans(Trans.R0,-width/2+3/dbu, height/2-4/dbu))).text_size = 1.5/dbu
    shapes(LayerINTERCONNECT).insert(Text("Wavelength range: %4.3f - %4.3f nm" % (self.wavelength_start, self.wavelength_stop), Trans(Trans.R0,-width/2+3/dbu, height/2-8/dbu))).text_size = 1.5/dbu
    shapes(LayerINTERCONNECT).insert(Text ("Number of points: %s" % (self.npoints), Trans(Trans.R0,-width/2+3/dbu, height/2-12/dbu))).text_size = 1.5/dbu
    shapes(LayerINTERCONNECT).insert(Text("Ignore optical IOs in simulations: %s" % (self.ignoreOpticalIOs), Trans(Trans.R0,-width/2+3/dbu, height/2-16/dbu))).text_size = 1.5/dbu
    # Add a polygon text description
    layout_pgtext(self.cell, TECHNOLOGY['Text'], -width/2*dbu+3, -height/2*dbu+2, "Number of points: %s" % (self.npoints), 2.2)
    layout_pgtext(self.cell, TECHNOLOGY['Text'], -width/2*dbu+3, -height/2*dbu+5, "Wavelength range: %4.3f - %4.3f nm" % (self.wavelength_start, self.wavelength_stop), 2.2)

class LumericalINTERCONNECT_Detector(PCellDeclarationHelper):
  """
  The PCell declaration for the LumericalINTERCONNECT Optical Network Analyzer.
  This configures the detector  
  """
  def __init__(self):
    # Important: initialize the super class
    super(LumericalINTERCONNECT_Detector, self).__init__()
    detector_number = 1
      
    # declare the parameters
    self.param("number", self.TypeInt, "Detector number", default = detector_number)     
    self.param("s", self.TypeShape, "", default = DPoint(0, 0))

  def can_create_from_shape_impl(self):
    return False

  def coerce_parameters_impl(self):
    pass
           
  def produce_impl(self):
    from SiEPIC_klayout.utils import layout_pgtext, get_technology
    TECHNOLOGY = get_technology()
    ly = self.layout
    shapes = self.cell.shapes
    dbu = self.layout.dbu
    
    LayerINTERCONNECT = ly.layer(TECHNOLOGY['Lumerical'])

    # Draw the outline
    width = 60/dbu
    height = 40/dbu
    shapes(LayerINTERCONNECT).insert(Box(-width/2, -height/2, width/2, height/2))

    shapes(LayerINTERCONNECT).insert(Text("Detector", Trans(Trans.R0, -width/2+3/dbu, height/2-4/dbu))).text_size = 1.5/dbu
    shapes(LayerINTERCONNECT).insert(Text("Detector Number: %s" % (self.number), Trans(Trans.R0, -width/2+3/dbu, height/2-8/dbu))).text_size = 1.5/dbu
    shapes(LayerINTERCONNECT).insert(Text("LumericalINTERCONNECT_Detector %s" % (self.number), Trans(Trans.R0, 0,0))).text_size = 0.1/dbu

    # Add a polygon text description
    layout_pgtext(self.cell, TECHNOLOGY['Text'], -width/2*dbu+3, -height/2*dbu+2, "Number: %s" % (self.number), 2.2)

class SiEPIC_General(Library):
  def __init__(self):
    library = 'SiEPIC General'
    print("Initializing '%s' Library." % library)

    self.description = "Laser, Detector"

    #import os
    #self.layout().read(os.path.join(os.path.dirname(os.path.realpath(__file__)), "SiEPIC-GSiP.gds"))
    #[self.layout().rename_cell(i, self.layout().cell_name(i).replace('_', ' ')) for i in range(0, self.layout().cells())]
    
    self.layout().register_pcell("Lumerical_INTERCONNECT_Laser", LumericalINTERCONNECT_Laser())
    self.layout().register_pcell("Lumerical_INTERCONNECT_Detector", LumericalINTERCONNECT_Detector())
    
    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

#    if int(Application.instance().version().split('.')[1]) &gt; 24:
      # KLayout v0.25 introduced technology variable:
#      self.technology=technology

    
SiEPIC_General()
 </text>
</klayout-macro>
