<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Generate compact models for PCells in layout</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>pcells</group-name>
 <menu-path>siepic_menu.simulation_components.begin</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya

# Export an XML file containing all the PCells and their parameters
# Call the PCell simulation engine(s) to generate compact models

# Supported PCells: 
# Contra-Directional Coupler: calls Mustafaâ€™s Python simulation in the SiEPIC-EBeam-PDK / CML


# Export XML file containing all the PCells and their parameters
def export_PCell_parameters(filepath):

  from SiEPIC.utils import select_instances
  import os
  from xml.etree.ElementTree import ElementTree, Element, SubElement, Comment, tostring

  selected_instances = select_instances()

  top = Element('PCells')
  comment = Comment('Generated by SiEPIC-Tools in KLayout')
  top.append(comment)
  count=0
  for obj in selected_instances:
    for c in cell.find_components(cell_selected=[obj.inst().cell],verbose=True):
      if c.cell.is_pcell_variant():
        child = SubElement(top, 'PCell')
        child.text = c.basic_name
        child2 = SubElement(child, 'Name')
        child2.text = c.basic_name
        child2 = SubElement(child, 'Component')
        child2.text = c.component
        child2 = SubElement(child, 'ID')
        child2.text = str(count)
        params = c.cell.pcell_parameters_by_name()
        for key in params.keys():
          if type(params[key]) in [bool,int]:
            child2 = SubElement(child, key)
            child2.text = str(int(params[key]))
          elif type(params[key])==float:
            child2 = SubElement(child, key)
            child2.text = str(float(params[key]))
          elif type(params[key])==LayerInfo:
            pass
          else:
            child2 = SubElement(child, key)
            child2.text = params[key]
      count+=1
  print (tostring(top))
  tree=ElementTree(top)

  print('Saving PCell parameters to file: %s' % filepath)

  tree.write(filepath)
  return filepath

# Import PCell parameters from XML; return an array of dict
def import_PCell_parameters(filepath):
  from SiEPIC.utils import get_technology, xml_to_dict
  print('Loading PCell parameters from file: %s' % filepath)

  with open(filepath, 'r') as file:
    d = xml_to_dict(file.read())
  print('Found %s PCells'%len(d['PCells']['PCell']))
  for PCell_params in d['PCells']['PCell']:
    print(PCell_params)
    if PCell_params['Name'] == 'Contra-Directional Coupler':
      print('CDC, gap=%s'%PCell_params['gap'])
  return d

def run_command(arguments):
    arguments.insert(0,'/Users/lukasc/opt/anaconda3/bin/python')
    process = subprocess.Popen(arguments, stdout=subprocess.PIPE, stderr = subprocess.PIPE, encoding='utf8')
    while True:
        output1 = process.stdout.readline()
        output2 = process.stderr.readline()
        if output1 == '' and output2 == '' and process.poll() is not None:
            break
        if output1:
            print (output1.strip())
        if output2:
            print (output2.strip())
    rc = process.poll()
    return rc


def python_commandline(arguments):
  print ("Running Python using the command interface.")
  import sys, os, string
  
  if sys.platform.startswith('linux'):
    import subprocess
    # Linux-specific code here...
    file_path = 'python'
    out = subprocess.check_output([file_path, arguments])
      
  
  elif sys.platform.startswith('darwin'):
    # OSX specific
    import sys
    if int(sys.version[0]) &gt; 2:
      import subprocess
      out = subprocess.check_output(['python', arguments])
    else:
      import commands
      runcmd = ('source ~/.bash_profile; python %s' % arguments)
      print("Running in shell: %s" % runcmd)
      out = commands.getstatusoutput(runcmd)

  
  elif sys.platform.startswith('win'):
    # Windows specific code here
    import subprocess
    file_path = 'python'
    out = subprocess.check_output(['python', arguments], shell=True)

  print (out)

from SiEPIC.utils import get_layout_variables

TECHNOLOGY, lv, ly, cell = get_layout_variables()
# location for the where the CMLs are installed:
filepath = os.path.join(pya.Application.instance().application_data_path(), 'Lumerical_CMLs', TECHNOLOGY['technology_name'],'source_data',
  'PCell_parameters.xml')


export_PCell_parameters(filepath)
import_PCell_parameters(filepath)

#arguments = filepath
#python_commandline(arguments)


run_command(['--version'])

#run_command(['/Users/lukasc/.klayout/Lumerical_CMLs/EBeam/source_data/CDC/main.py'])

python_main = os.path.join(os.path.dirname(filepath),'CDC/main.py')
run_command([python_main, filepath])
  
#run_command('/Users/lukasc/opt/anaconda3/bin/python','--version')
#run_command(['-c', '"print(100)"'])
# run_command('/Users/lukasc/opt/anaconda3/bin/python --version')

</text>
</klayout-macro>
