<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
import SiEPIC, pya

'''
#################################################################################

This file is useful to use when debugging code. Breakpoints do not get registered
from within the module. To test code, define it in this file and import all modules 
explicitly. The changes will persist as modules are Singleton-like (only imported once).

Run to redefine functions/class methods

#################################################################################

Example 1:

def arc_test():
  return [pya.Point(0,0)]

from SiEPIC import utils
utils.arc = arc_test

*run macro*
*continue using Klayout as normal*

#################################################F################################
'''

if 1:
    SiEPIC = reload(SiEPIC)
    SiEPIC.extend = reload(SiEPIC.extend)
    SiEPIC._globals = reload(SiEPIC._globals)
    SiEPIC.core = reload(SiEPIC.core)
    SiEPIC.examples = reload(SiEPIC.examples)
    SiEPIC.lumerical = reload(SiEPIC.lumerical)
    SiEPIC.lumerical.fdtd = reload(SiEPIC.lumerical.fdtd)
    SiEPIC.lumerical.interconnect = reload(SiEPIC.lumerical.interconnect)
    SiEPIC.scripts = reload(SiEPIC.scripts)
    SiEPIC.utils = reload(SiEPIC.utils)
    SiEPIC.setup = reload(SiEPIC.setup)
    print('Reloaded SiEPIC')


print ("***")

  
if 0:
  import os, fnmatch
  dir_path = pya.Application.instance().application_data_path()
  tech_name = 'GSiP'
  matches = []
  for root, dirnames, filenames in os.walk(dir_path, followlinks=True):
      for filename in fnmatch.filter(filenames, '*' + tech_name + '.lyp'):
          matches.append(os.path.join(root, filename))
  print(matches)
  

if 1:
  from SiEPIC.utils import get_layout_variables
  TECHNOLOGY, lv, ly, cell = get_layout_variables()

  #pins = cell.find_pins()
  #print (pins)

  components = cell.find_components ()
  print ("* Display list of components:" )
  [c.display() for c in components]
  
  #from SiEPIC.core import WaveguideGUI, MonteCarloGUI, CalibreGUI, Net, Component
  #from SiEPIC import _globals
  #from SiEPIC.netlist import find_all_components
  
  #NET = Net()
  #NET.find_components()
  
  
  #NET.refresh()
  
  
  
  
  
  
  
  
  
  
  
  
</text>
</klayout-macro>
